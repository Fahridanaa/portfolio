---
interface Props {
	href: string;
	label: string;
}

const { href, label } = Astro.props;
const sectionId = href.replace("#", "");

declare global {
	interface Window {
		previousObserver: IntersectionObserver | undefined;
	}
}
---

<div
	class="nav-item duration-500 p-1 lg:px-2 rounded-lg hover:scale-125 cursor-pointer opacity-70 hover:opacity-100"
	data-section={sectionId}>
	<a href={href} class="hidden lg:block">{label}</a>
</div>
<script>
	function initializeNavObserver() {
		const sections = document.querySelectorAll("section[id]");
		const navItems = document.querySelectorAll(".nav-item");

		if (window.previousObserver) {
			window.previousObserver.disconnect();
		}

		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						const activeId = entry.target.id;
						navItems.forEach((item) => {
							if (
								(item as HTMLElement).dataset.section ===
								activeId
							) {
								item.classList.add("active");
							} else {
								item.classList.remove("active");
							}
						});
					}
				});
			},
			{ threshold: 0.5 }
		);

		sections.forEach((section) => observer.observe(section));
		window.previousObserver = observer;
	}

	initializeNavObserver();

	document.addEventListener("astro:after-swap", initializeNavObserver);
</script>

<style>
	.active {
		opacity: 1;
		transform: scale(1.25);
	}
</style>
